package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ji.smartclothes.bean.ClothesPicture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOTHES_PICTURE".
*/
public class ClothesPictureDao extends AbstractDao<ClothesPicture, Long> {

    public static final String TABLENAME = "CLOTHES_PICTURE";

    /**
     * Properties of entity ClothesPicture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ClothesPictureNumber = new Property(0, long.class, "clothesPictureNumber", true, "_id");
        public final static Property ClothesPictureType = new Property(1, int.class, "clothesPictureType", false, "Weather");
        public final static Property ClothesPicture = new Property(2, String.class, "clothesPicture", false, "CLOTHES_PICTURE");
        public final static Property IsSelected = new Property(3, boolean.class, "isSelected", false, "IS_SELECTED");
    }


    public ClothesPictureDao(DaoConfig config) {
        super(config);
    }
    
    public ClothesPictureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOTHES_PICTURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: clothesPictureNumber
                "\"Weather\" INTEGER NOT NULL ," + // 1: clothesPictureType
                "\"CLOTHES_PICTURE\" TEXT," + // 2: clothesPicture
                "\"IS_SELECTED\" INTEGER NOT NULL );"); // 3: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOTHES_PICTURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClothesPicture entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getClothesPictureNumber());
        stmt.bindLong(2, entity.getClothesPictureType());
 
        String clothesPicture = entity.getClothesPicture();
        if (clothesPicture != null) {
            stmt.bindString(3, clothesPicture);
        }
        stmt.bindLong(4, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClothesPicture entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getClothesPictureNumber());
        stmt.bindLong(2, entity.getClothesPictureType());
 
        String clothesPicture = entity.getClothesPicture();
        if (clothesPicture != null) {
            stmt.bindString(3, clothesPicture);
        }
        stmt.bindLong(4, entity.getIsSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ClothesPicture readEntity(Cursor cursor, int offset) {
        ClothesPicture entity = new ClothesPicture( //
            cursor.getLong(offset + 0), // clothesPictureNumber
            cursor.getInt(offset + 1), // clothesPictureType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clothesPicture
            cursor.getShort(offset + 3) != 0 // isSelected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClothesPicture entity, int offset) {
        entity.setClothesPictureNumber(cursor.getLong(offset + 0));
        entity.setClothesPictureType(cursor.getInt(offset + 1));
        entity.setClothesPicture(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSelected(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClothesPicture entity, long rowId) {
        entity.setClothesPictureNumber(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClothesPicture entity) {
        if(entity != null) {
            return entity.getClothesPictureNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClothesPicture entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
