package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ji.smartclothes.bean.Weather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER".
*/
public class WeatherDao extends AbstractDao<Weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity Weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GetDateTiem = new Property(0, long.class, "getDateTiem", true, "_id");
        public final static Property Temperature = new Property(1, int.class, "temperature", false, "Weather");
        public final static Property Cloud = new Property(2, String.class, "cloud", false, "CLOUD");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property Remind = new Property(4, String.class, "remind", false, "REMIND");
    }


    public WeatherDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: getDateTiem
                "\"Weather\" INTEGER NOT NULL ," + // 1: temperature
                "\"CLOUD\" TEXT," + // 2: cloud
                "\"CITY\" TEXT," + // 3: city
                "\"REMIND\" TEXT);"); // 4: remind
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Weather entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGetDateTiem());
        stmt.bindLong(2, entity.getTemperature());
 
        String cloud = entity.getCloud();
        if (cloud != null) {
            stmt.bindString(3, cloud);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String remind = entity.getRemind();
        if (remind != null) {
            stmt.bindString(5, remind);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Weather entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGetDateTiem());
        stmt.bindLong(2, entity.getTemperature());
 
        String cloud = entity.getCloud();
        if (cloud != null) {
            stmt.bindString(3, cloud);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String remind = entity.getRemind();
        if (remind != null) {
            stmt.bindString(5, remind);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Weather readEntity(Cursor cursor, int offset) {
        Weather entity = new Weather( //
            cursor.getLong(offset + 0), // getDateTiem
            cursor.getInt(offset + 1), // temperature
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cloud
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // remind
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Weather entity, int offset) {
        entity.setGetDateTiem(cursor.getLong(offset + 0));
        entity.setTemperature(cursor.getInt(offset + 1));
        entity.setCloud(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemind(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Weather entity, long rowId) {
        entity.setGetDateTiem(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Weather entity) {
        if(entity != null) {
            return entity.getGetDateTiem();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Weather entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
